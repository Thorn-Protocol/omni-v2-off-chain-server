/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IRouter {
  export type RouteStruct = {
    from: AddressLike;
    to: AddressLike;
    stable: boolean;
    factory: AddressLike;
  };

  export type RouteStructOutput = [
    from: string,
    to: string,
    stable: boolean,
    factory: string
  ] & { from: string; to: string; stable: boolean; factory: string };

  export type ZapStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    stable: boolean;
    factory: AddressLike;
    amountOutMinA: BigNumberish;
    amountOutMinB: BigNumberish;
    amountAMin: BigNumberish;
    amountBMin: BigNumberish;
  };

  export type ZapStructOutput = [
    tokenA: string,
    tokenB: string,
    stable: boolean,
    factory: string,
    amountOutMinA: bigint,
    amountOutMinB: bigint,
    amountAMin: bigint,
    amountBMin: bigint
  ] & {
    tokenA: string;
    tokenB: string;
    stable: boolean;
    factory: string;
    amountOutMinA: bigint;
    amountOutMinB: bigint;
    amountAMin: bigint;
    amountBMin: bigint;
  };
}

export interface AerodromeRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETHER"
      | "UNSAFE_swapExactTokensForTokens"
      | "addLiquidity"
      | "addLiquidityETH"
      | "defaultFactory"
      | "factoryRegistry"
      | "generateZapInParams"
      | "generateZapOutParams"
      | "getAmountsOut"
      | "getReserves"
      | "isTrustedForwarder"
      | "poolFor"
      | "quoteAddLiquidity"
      | "quoteRemoveLiquidity"
      | "quoteStableLiquidityRatio"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityETHSupportingFeeOnTransferTokens"
      | "sortTokens"
      | "swapExactETHForTokens"
      | "swapExactETHForTokensSupportingFeeOnTransferTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForETHSupportingFeeOnTransferTokens"
      | "swapExactTokensForTokens"
      | "swapExactTokensForTokensSupportingFeeOnTransferTokens"
      | "voter"
      | "weth"
      | "zapIn"
      | "zapOut"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ETHER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNSAFE_swapExactTokensForTokens",
    values: [BigNumberish[], IRouter.RouteStruct[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateZapInParams",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      AddressLike,
      BigNumberish,
      BigNumberish,
      IRouter.RouteStruct[],
      IRouter.RouteStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateZapOutParams",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      AddressLike,
      BigNumberish,
      IRouter.RouteStruct[],
      IRouter.RouteStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, IRouter.RouteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [AddressLike, AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFor",
    values: [AddressLike, AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAddLiquidity",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRemoveLiquidity",
    values: [AddressLike, AddressLike, boolean, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteStableLiquidityRatio",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    values: [
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, IRouter.RouteStruct[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, IRouter.RouteStruct[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      BigNumberish,
      BigNumberish,
      IRouter.RouteStruct[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      IRouter.RouteStruct[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      IRouter.RouteStruct[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      IRouter.RouteStruct[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      IRouter.ZapStruct,
      IRouter.RouteStruct[],
      IRouter.RouteStruct[],
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOut",
    values: [
      AddressLike,
      BigNumberish,
      IRouter.ZapStruct,
      IRouter.RouteStruct[],
      IRouter.RouteStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ETHER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNSAFE_swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateZapInParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateZapOutParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteStableLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapOut", data: BytesLike): Result;
}

export interface AerodromeRouter extends BaseContract {
  connect(runner?: ContractRunner | null): AerodromeRouter;
  waitForDeployment(): Promise<this>;

  interface: AerodromeRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETHER: TypedContractMethod<[], [string], "view">;

  UNSAFE_swapExactTokensForTokens: TypedContractMethod<
    [
      amounts: BigNumberish[],
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;

  addLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;

  defaultFactory: TypedContractMethod<[], [string], "view">;

  factoryRegistry: TypedContractMethod<[], [string], "view">;

  generateZapInParams: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      amountInA: BigNumberish,
      amountInB: BigNumberish,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOutMinA: bigint;
        amountOutMinB: bigint;
        amountAMin: bigint;
        amountBMin: bigint;
      }
    ],
    "view"
  >;

  generateZapOutParams: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      liquidity: BigNumberish,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOutMinA: bigint;
        amountOutMinB: bigint;
        amountAMin: bigint;
        amountBMin: bigint;
      }
    ],
    "view"
  >;

  getAmountsOut: TypedContractMethod<
    [amountIn: BigNumberish, routes: IRouter.RouteStruct[]],
    [bigint[]],
    "view"
  >;

  getReserves: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike
    ],
    [[bigint, bigint] & { reserveA: bigint; reserveB: bigint }],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  poolFor: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike
    ],
    [string],
    "view"
  >;

  quoteAddLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;

  quoteRemoveLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "view"
  >;

  quoteStableLiquidityRatio: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, _factory: AddressLike],
    [bigint],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  removeLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;

  removeLiquidityETHSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  sortTokens: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[string, string] & { token0: string; token1: string }],
    "view"
  >;

  swapExactETHForTokens: TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapExactETHForTokensSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;

  swapExactTokensForETH: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapExactTokensForETHSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapExactTokensForTokensSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  voter: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  zapIn: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountInA: BigNumberish,
      amountInB: BigNumberish,
      zapInPool: IRouter.ZapStruct,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[],
      to: AddressLike,
      stake: boolean
    ],
    [bigint],
    "payable"
  >;

  zapOut: TypedContractMethod<
    [
      tokenOut: AddressLike,
      liquidity: BigNumberish,
      zapOutPool: IRouter.ZapStruct,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETHER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNSAFE_swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amounts: BigNumberish[],
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "defaultFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factoryRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateZapInParams"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      amountInA: BigNumberish,
      amountInB: BigNumberish,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOutMinA: bigint;
        amountOutMinB: bigint;
        amountAMin: bigint;
        amountBMin: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateZapOutParams"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      liquidity: BigNumberish,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOutMinA: bigint;
        amountOutMinB: bigint;
        amountAMin: bigint;
        amountBMin: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountsOut"
  ): TypedContractMethod<
    [amountIn: BigNumberish, routes: IRouter.RouteStruct[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike
    ],
    [[bigint, bigint] & { reserveA: bigint; reserveB: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolFor"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteAddLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteRemoveLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      _factory: AddressLike,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteStableLiquidityRatio"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, _factory: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETHSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      token: AddressLike,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sortTokens"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[string, string] & { token0: string; token1: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactETHForTokens"
  ): TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactETHForTokensSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForETH"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForETHSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokensSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: IRouter.RouteStruct[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zapIn"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountInA: BigNumberish,
      amountInB: BigNumberish,
      zapInPool: IRouter.ZapStruct,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[],
      to: AddressLike,
      stake: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "zapOut"
  ): TypedContractMethod<
    [
      tokenOut: AddressLike,
      liquidity: BigNumberish,
      zapOutPool: IRouter.ZapStruct,
      routesA: IRouter.RouteStruct[],
      routesB: IRouter.RouteStruct[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
