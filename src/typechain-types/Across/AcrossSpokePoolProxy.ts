/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace V3SpokePoolInterface {
  export type V3RelayExecutionEventInfoStruct = {
    updatedRecipient: BytesLike;
    updatedMessageHash: BytesLike;
    updatedOutputAmount: BigNumberish;
    fillType: BigNumberish;
  };

  export type V3RelayExecutionEventInfoStructOutput = [
    updatedRecipient: string,
    updatedMessageHash: string,
    updatedOutputAmount: bigint,
    fillType: bigint
  ] & {
    updatedRecipient: string;
    updatedMessageHash: string;
    updatedOutputAmount: bigint;
    fillType: bigint;
  };

  export type LegacyV3RelayExecutionEventInfoStruct = {
    updatedRecipient: AddressLike;
    updatedMessage: BytesLike;
    updatedOutputAmount: BigNumberish;
    fillType: BigNumberish;
  };

  export type LegacyV3RelayExecutionEventInfoStructOutput = [
    updatedRecipient: string,
    updatedMessage: string,
    updatedOutputAmount: bigint,
    fillType: bigint
  ] & {
    updatedRecipient: string;
    updatedMessage: string;
    updatedOutputAmount: bigint;
    fillType: bigint;
  };

  export type V3RelayDataStruct = {
    depositor: BytesLike;
    recipient: BytesLike;
    exclusiveRelayer: BytesLike;
    inputToken: BytesLike;
    outputToken: BytesLike;
    inputAmount: BigNumberish;
    outputAmount: BigNumberish;
    originChainId: BigNumberish;
    depositId: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityDeadline: BigNumberish;
    message: BytesLike;
  };

  export type V3RelayDataStructOutput = [
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    message: string
  ] & {
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    message: string;
  };

  export type V3SlowFillStruct = {
    relayData: V3SpokePoolInterface.V3RelayDataStruct;
    chainId: BigNumberish;
    updatedOutputAmount: BigNumberish;
  };

  export type V3SlowFillStructOutput = [
    relayData: V3SpokePoolInterface.V3RelayDataStructOutput,
    chainId: bigint,
    updatedOutputAmount: bigint
  ] & {
    relayData: V3SpokePoolInterface.V3RelayDataStructOutput;
    chainId: bigint;
    updatedOutputAmount: bigint;
  };

  export type V3RelayDataLegacyStruct = {
    depositor: AddressLike;
    recipient: AddressLike;
    exclusiveRelayer: AddressLike;
    inputToken: AddressLike;
    outputToken: AddressLike;
    inputAmount: BigNumberish;
    outputAmount: BigNumberish;
    originChainId: BigNumberish;
    depositId: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityDeadline: BigNumberish;
    message: BytesLike;
  };

  export type V3RelayDataLegacyStructOutput = [
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    message: string
  ] & {
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    message: string;
  };
}

export declare namespace SpokePoolInterface {
  export type RelayerRefundLeafStruct = {
    amountToReturn: BigNumberish;
    chainId: BigNumberish;
    refundAmounts: BigNumberish[];
    leafId: BigNumberish;
    l2TokenAddress: AddressLike;
    refundAddresses: AddressLike[];
  };

  export type RelayerRefundLeafStructOutput = [
    amountToReturn: bigint,
    chainId: bigint,
    refundAmounts: bigint[],
    leafId: bigint,
    l2TokenAddress: string,
    refundAddresses: string[]
  ] & {
    amountToReturn: bigint;
    chainId: bigint;
    refundAmounts: bigint[];
    leafId: bigint;
    l2TokenAddress: string;
    refundAddresses: string[];
  };
}

export declare namespace MultiCallerUpgradeable {
  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [success: boolean, returnData: string] & {
    success: boolean;
    returnData: string;
  };
}

export interface AcrossSpokePoolProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EMPTY_RELAYER"
      | "EMPTY_REPAYMENT_CHAIN_ID"
      | "INFINITE_FILL_DEADLINE"
      | "MAX_EXCLUSIVITY_PERIOD_SECONDS"
      | "MAX_TRANSFER_SIZE"
      | "MESSENGER"
      | "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH"
      | "__OvmSpokePool_init"
      | "__SpokePool_init"
      | "cctpTokenMessenger"
      | "cctpV2"
      | "chainId"
      | "claimRelayerRefund"
      | "crossDomainAdmin"
      | "deposit"
      | "depositDeprecated_5947912356"
      | "depositFor"
      | "depositNow"
      | "depositQuoteTimeBuffer"
      | "depositV3"
      | "depositV3Now"
      | "emergencyDeleteRootBundle"
      | "executeRelayerRefundLeaf"
      | "executeSlowRelayLeaf"
      | "fill"
      | "fillDeadlineBuffer"
      | "fillRelay"
      | "fillRelayWithUpdatedDeposit"
      | "fillStatuses"
      | "fillV3Relay"
      | "getCurrentTime"
      | "getRelayerRefund"
      | "getUnsafeDepositId"
      | "getV3RelayHash"
      | "initialize"
      | "l1Gas"
      | "l2Eth"
      | "multicall"
      | "numberOfDeposits"
      | "pauseDeposits"
      | "pauseFills"
      | "pausedDeposits"
      | "pausedFills"
      | "proxiableUUID"
      | "recipientCircleDomainId"
      | "relayRootBundle"
      | "relayerRefund"
      | "remoteL1Tokens"
      | "requestSlowFill"
      | "rootBundles"
      | "setCrossDomainAdmin"
      | "setL1GasLimit"
      | "setRemoteL1Token"
      | "setTokenBridge"
      | "setWithdrawalRecipient"
      | "speedUpDeposit"
      | "speedUpV3Deposit"
      | "tokenBridges"
      | "tryMulticall"
      | "unsafeDeposit"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usdcToken"
      | "withdrawalRecipient"
      | "wrappedNativeToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ClaimedRelayerRefund"
      | "EmergencyDeletedRootBundle"
      | "EnabledDepositRoute"
      | "ExecutedRelayerRefundRoot"
      | "FilledRelay"
      | "FilledV3Relay"
      | "FundsDeposited"
      | "Initialized"
      | "PausedDeposits"
      | "PausedFills"
      | "RelayedRootBundle"
      | "RequestedSlowFill"
      | "RequestedSpeedUpDeposit"
      | "RequestedSpeedUpV3Deposit"
      | "RequestedV3SlowFill"
      | "SetL1Gas"
      | "SetL2TokenBridge"
      | "SetRemoteL1Token"
      | "SetWithdrawalRecipient"
      | "SetXDomainAdmin"
      | "TokensBridged"
      | "Upgraded"
      | "V3FundsDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EMPTY_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_REPAYMENT_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INFINITE_FILL_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXCLUSIVITY_PERIOD_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TRANSFER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MESSENGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__OvmSpokePool_init",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "__SpokePool_init",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cctpTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cctpV2", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRelayerRefund",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossDomainAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDeprecated_5947912356",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNow",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositQuoteTimeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositV3",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositV3Now",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeleteRootBundle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRelayerRefundLeaf",
    values: [
      BigNumberish,
      SpokePoolInterface.RelayerRefundLeafStruct,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSlowRelayLeaf",
    values: [V3SpokePoolInterface.V3SlowFillStruct, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillDeadlineBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelay",
    values: [V3SpokePoolInterface.V3RelayDataStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelayWithUpdatedDeposit",
    values: [
      V3SpokePoolInterface.V3RelayDataStruct,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillStatuses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillV3Relay",
    values: [V3SpokePoolInterface.V3RelayDataLegacyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayerRefund",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnsafeDepositId",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getV3RelayHash",
    values: [V3SpokePoolInterface.V3RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "l1Gas", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2Eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "pauseFills", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "pausedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pausedFills",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipientCircleDomainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayRootBundle",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRefund",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteL1Tokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSlowFill",
    values: [V3SpokePoolInterface.V3RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rootBundles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossDomainAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1GasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteL1Token",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBridge",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "speedUpDeposit",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "speedUpV3Deposit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryMulticall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeDeposit",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNativeToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EMPTY_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_REPAYMENT_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INFINITE_FILL_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXCLUSIVITY_PERIOD_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TRANSFER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MESSENGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__OvmSpokePool_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__SpokePool_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cctpTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cctpV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRelayerRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossDomainAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDeprecated_5947912356",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositQuoteTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositV3Now",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeleteRootBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRelayerRefundLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSlowRelayLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillDeadlineBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillRelayWithUpdatedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillV3Relay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnsafeDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV3RelayHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Gas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Eth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseFills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedFills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientCircleDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayRootBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteL1Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSlowFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossDomainAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1GasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteL1Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speedUpDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speedUpV3Deposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryMulticall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNativeToken",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedRelayerRefundEvent {
  export type InputTuple = [
    l2TokenAddress: BytesLike,
    refundAddress: BytesLike,
    amount: BigNumberish,
    caller: AddressLike
  ];
  export type OutputTuple = [
    l2TokenAddress: string,
    refundAddress: string,
    amount: bigint,
    caller: string
  ];
  export interface OutputObject {
    l2TokenAddress: string;
    refundAddress: string;
    amount: bigint;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyDeletedRootBundleEvent {
  export type InputTuple = [rootBundleId: BigNumberish];
  export type OutputTuple = [rootBundleId: bigint];
  export interface OutputObject {
    rootBundleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledDepositRouteEvent {
  export type InputTuple = [
    originToken: AddressLike,
    destinationChainId: BigNumberish,
    enabled: boolean
  ];
  export type OutputTuple = [
    originToken: string,
    destinationChainId: bigint,
    enabled: boolean
  ];
  export interface OutputObject {
    originToken: string;
    destinationChainId: bigint;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedRelayerRefundRootEvent {
  export type InputTuple = [
    amountToReturn: BigNumberish,
    chainId: BigNumberish,
    refundAmounts: BigNumberish[],
    rootBundleId: BigNumberish,
    leafId: BigNumberish,
    l2TokenAddress: AddressLike,
    refundAddresses: AddressLike[],
    deferredRefunds: boolean,
    caller: AddressLike
  ];
  export type OutputTuple = [
    amountToReturn: bigint,
    chainId: bigint,
    refundAmounts: bigint[],
    rootBundleId: bigint,
    leafId: bigint,
    l2TokenAddress: string,
    refundAddresses: string[],
    deferredRefunds: boolean,
    caller: string
  ];
  export interface OutputObject {
    amountToReturn: bigint;
    chainId: bigint;
    refundAmounts: bigint[];
    rootBundleId: bigint;
    leafId: bigint;
    l2TokenAddress: string;
    refundAddresses: string[];
    deferredRefunds: boolean;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FilledRelayEvent {
  export type InputTuple = [
    inputToken: BytesLike,
    outputToken: BytesLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: BytesLike,
    relayer: BytesLike,
    depositor: BytesLike,
    recipient: BytesLike,
    messageHash: BytesLike,
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStruct
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    repaymentChainId: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    relayer: string,
    depositor: string,
    recipient: string,
    messageHash: string,
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStructOutput
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    repaymentChainId: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    relayer: string;
    depositor: string;
    recipient: string;
    messageHash: string;
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FilledV3RelayEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: AddressLike,
    relayer: AddressLike,
    depositor: AddressLike,
    recipient: AddressLike,
    message: BytesLike,
    relayExecutionInfo: V3SpokePoolInterface.LegacyV3RelayExecutionEventInfoStruct
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    repaymentChainId: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    relayer: string,
    depositor: string,
    recipient: string,
    message: string,
    relayExecutionInfo: V3SpokePoolInterface.LegacyV3RelayExecutionEventInfoStructOutput
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    repaymentChainId: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    relayer: string;
    depositor: string;
    recipient: string;
    message: string;
    relayExecutionInfo: V3SpokePoolInterface.LegacyV3RelayExecutionEventInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    inputToken: BytesLike,
    outputToken: BytesLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    destinationChainId: BigNumberish,
    depositId: BigNumberish,
    quoteTimestamp: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    depositor: BytesLike,
    recipient: BytesLike,
    exclusiveRelayer: BytesLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    destinationChainId: bigint,
    depositId: bigint,
    quoteTimestamp: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    message: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    destinationChainId: bigint;
    depositId: bigint;
    quoteTimestamp: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedDepositsEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedFillsEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayedRootBundleEvent {
  export type InputTuple = [
    rootBundleId: BigNumberish,
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike
  ];
  export type OutputTuple = [
    rootBundleId: bigint,
    relayerRefundRoot: string,
    slowRelayRoot: string
  ];
  export interface OutputObject {
    rootBundleId: bigint;
    relayerRefundRoot: string;
    slowRelayRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedSlowFillEvent {
  export type InputTuple = [
    inputToken: BytesLike,
    outputToken: BytesLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: BytesLike,
    depositor: BytesLike,
    recipient: BytesLike,
    messageHash: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    depositor: string,
    recipient: string,
    messageHash: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    depositor: string;
    recipient: string;
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedSpeedUpDepositEvent {
  export type InputTuple = [
    updatedOutputAmount: BigNumberish,
    depositId: BigNumberish,
    depositor: BytesLike,
    updatedRecipient: BytesLike,
    updatedMessage: BytesLike,
    depositorSignature: BytesLike
  ];
  export type OutputTuple = [
    updatedOutputAmount: bigint,
    depositId: bigint,
    depositor: string,
    updatedRecipient: string,
    updatedMessage: string,
    depositorSignature: string
  ];
  export interface OutputObject {
    updatedOutputAmount: bigint;
    depositId: bigint;
    depositor: string;
    updatedRecipient: string;
    updatedMessage: string;
    depositorSignature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedSpeedUpV3DepositEvent {
  export type InputTuple = [
    updatedOutputAmount: BigNumberish,
    depositId: BigNumberish,
    depositor: AddressLike,
    updatedRecipient: AddressLike,
    updatedMessage: BytesLike,
    depositorSignature: BytesLike
  ];
  export type OutputTuple = [
    updatedOutputAmount: bigint,
    depositId: bigint,
    depositor: string,
    updatedRecipient: string,
    updatedMessage: string,
    depositorSignature: string
  ];
  export interface OutputObject {
    updatedOutputAmount: bigint;
    depositId: bigint;
    depositor: string;
    updatedRecipient: string;
    updatedMessage: string;
    depositorSignature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedV3SlowFillEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: AddressLike,
    depositor: AddressLike,
    recipient: AddressLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    depositor: string,
    recipient: string,
    message: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    depositor: string;
    recipient: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetL1GasEvent {
  export type InputTuple = [newL1Gas: BigNumberish];
  export type OutputTuple = [newL1Gas: bigint];
  export interface OutputObject {
    newL1Gas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetL2TokenBridgeEvent {
  export type InputTuple = [l2Token: AddressLike, tokenBridge: AddressLike];
  export type OutputTuple = [l2Token: string, tokenBridge: string];
  export interface OutputObject {
    l2Token: string;
    tokenBridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRemoteL1TokenEvent {
  export type InputTuple = [l2Token: AddressLike, l1Token: AddressLike];
  export type OutputTuple = [l2Token: string, l1Token: string];
  export interface OutputObject {
    l2Token: string;
    l1Token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawalRecipientEvent {
  export type InputTuple = [newWithdrawalRecipient: AddressLike];
  export type OutputTuple = [newWithdrawalRecipient: string];
  export interface OutputObject {
    newWithdrawalRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetXDomainAdminEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBridgedEvent {
  export type InputTuple = [
    amountToReturn: BigNumberish,
    chainId: BigNumberish,
    leafId: BigNumberish,
    l2TokenAddress: BytesLike,
    caller: AddressLike
  ];
  export type OutputTuple = [
    amountToReturn: bigint,
    chainId: bigint,
    leafId: bigint,
    l2TokenAddress: string,
    caller: string
  ];
  export interface OutputObject {
    amountToReturn: bigint;
    chainId: bigint;
    leafId: bigint;
    l2TokenAddress: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace V3FundsDepositedEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    destinationChainId: BigNumberish,
    depositId: BigNumberish,
    quoteTimestamp: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    depositor: AddressLike,
    recipient: AddressLike,
    exclusiveRelayer: AddressLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    destinationChainId: bigint,
    depositId: bigint,
    quoteTimestamp: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    message: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    destinationChainId: bigint;
    depositId: bigint;
    quoteTimestamp: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AcrossSpokePoolProxy extends BaseContract {
  connect(runner?: ContractRunner | null): AcrossSpokePoolProxy;
  waitForDeployment(): Promise<this>;

  interface: AcrossSpokePoolProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMPTY_RELAYER: TypedContractMethod<[], [string], "view">;

  EMPTY_REPAYMENT_CHAIN_ID: TypedContractMethod<[], [bigint], "view">;

  INFINITE_FILL_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  MAX_EXCLUSIVITY_PERIOD_SECONDS: TypedContractMethod<[], [bigint], "view">;

  MAX_TRANSFER_SIZE: TypedContractMethod<[], [bigint], "view">;

  MESSENGER: TypedContractMethod<[], [string], "view">;

  UPDATE_BYTES32_DEPOSIT_DETAILS_HASH: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  __OvmSpokePool_init: TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike,
      _l2Eth: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  __SpokePool_init: TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  cctpTokenMessenger: TypedContractMethod<[], [string], "view">;

  cctpV2: TypedContractMethod<[], [boolean], "view">;

  chainId: TypedContractMethod<[], [bigint], "view">;

  claimRelayerRefund: TypedContractMethod<
    [l2TokenAddress: BytesLike, refundAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  crossDomainAdmin: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  depositDeprecated_5947912356: TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      arg7: BigNumberish
    ],
    [void],
    "payable"
  >;

  depositFor: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      arg8: BigNumberish
    ],
    [void],
    "payable"
  >;

  depositNow: TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      fillDeadlineOffset: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  depositQuoteTimeBuffer: TypedContractMethod<[], [bigint], "view">;

  depositV3: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  depositV3Now: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      fillDeadlineOffset: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  emergencyDeleteRootBundle: TypedContractMethod<
    [rootBundleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeRelayerRefundLeaf: TypedContractMethod<
    [
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[]
    ],
    [void],
    "payable"
  >;

  executeSlowRelayLeaf: TypedContractMethod<
    [
      slowFillLeaf: V3SpokePoolInterface.V3SlowFillStruct,
      rootBundleId: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  fill: TypedContractMethod<
    [orderId: BytesLike, originData: BytesLike, fillerData: BytesLike],
    [void],
    "nonpayable"
  >;

  fillDeadlineBuffer: TypedContractMethod<[], [bigint], "view">;

  fillRelay: TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      repaymentAddress: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  fillRelayWithUpdatedDeposit: TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      repaymentAddress: BytesLike,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  fillStatuses: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  fillV3Relay: TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataLegacyStruct,
      repaymentChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCurrentTime: TypedContractMethod<[], [bigint], "view">;

  getRelayerRefund: TypedContractMethod<
    [l2TokenAddress: AddressLike, refundAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUnsafeDepositId: TypedContractMethod<
    [msgSender: AddressLike, depositor: BytesLike, depositNonce: BigNumberish],
    [bigint],
    "view"
  >;

  getV3RelayHash: TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  l1Gas: TypedContractMethod<[], [bigint], "view">;

  l2Eth: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  numberOfDeposits: TypedContractMethod<[], [bigint], "view">;

  pauseDeposits: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  pauseFills: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  pausedDeposits: TypedContractMethod<[], [boolean], "view">;

  pausedFills: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  recipientCircleDomainId: TypedContractMethod<[], [bigint], "view">;

  relayRootBundle: TypedContractMethod<
    [relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  relayerRefund: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  remoteL1Tokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  requestSlowFill: TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [void],
    "nonpayable"
  >;

  rootBundles: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }],
    "view"
  >;

  setCrossDomainAdmin: TypedContractMethod<
    [newCrossDomainAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setL1GasLimit: TypedContractMethod<
    [newl1Gas: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRemoteL1Token: TypedContractMethod<
    [l2Token: AddressLike, l1Token: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenBridge: TypedContractMethod<
    [l2Token: AddressLike, tokenBridge: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawalRecipient: TypedContractMethod<
    [newWithdrawalRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  speedUpDeposit: TypedContractMethod<
    [
      depositor: BytesLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  speedUpV3Deposit: TypedContractMethod<
    [
      depositor: AddressLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  tokenBridges: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  tryMulticall: TypedContractMethod<
    [data: BytesLike[]],
    [MultiCallerUpgradeable.ResultStructOutput[]],
    "nonpayable"
  >;

  unsafeDeposit: TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      depositNonce: BigNumberish,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  withdrawalRecipient: TypedContractMethod<[], [string], "view">;

  wrappedNativeToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EMPTY_RELAYER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMPTY_REPAYMENT_CHAIN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INFINITE_FILL_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EXCLUSIVITY_PERIOD_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TRANSFER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MESSENGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "__OvmSpokePool_init"
  ): TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike,
      _l2Eth: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "__SpokePool_init"
  ): TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cctpTokenMessenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cctpV2"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRelayerRefund"
  ): TypedContractMethod<
    [l2TokenAddress: BytesLike, refundAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossDomainAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositDeprecated_5947912356"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      arg7: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      arg8: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNow"
  ): TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      fillDeadlineOffset: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositQuoteTimeBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositV3"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositV3Now"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      fillDeadlineOffset: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyDeleteRootBundle"
  ): TypedContractMethod<[rootBundleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeRelayerRefundLeaf"
  ): TypedContractMethod<
    [
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeSlowRelayLeaf"
  ): TypedContractMethod<
    [
      slowFillLeaf: V3SpokePoolInterface.V3SlowFillStruct,
      rootBundleId: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fill"
  ): TypedContractMethod<
    [orderId: BytesLike, originData: BytesLike, fillerData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillDeadlineBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillRelay"
  ): TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      repaymentAddress: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillRelayWithUpdatedDeposit"
  ): TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      repaymentAddress: BytesLike,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillStatuses"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillV3Relay"
  ): TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataLegacyStruct,
      repaymentChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRelayerRefund"
  ): TypedContractMethod<
    [l2TokenAddress: AddressLike, refundAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnsafeDepositId"
  ): TypedContractMethod<
    [msgSender: AddressLike, depositor: BytesLike, depositNonce: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getV3RelayHash"
  ): TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _initialDepositId: BigNumberish,
      _crossDomainAdmin: AddressLike,
      _withdrawalRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "l1Gas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "l2Eth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "numberOfDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseDeposits"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseFills"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pausedDeposits"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pausedFills"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recipientCircleDomainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relayRootBundle"
  ): TypedContractMethod<
    [relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relayerRefund"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "remoteL1Tokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "requestSlowFill"
  ): TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rootBundles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCrossDomainAdmin"
  ): TypedContractMethod<
    [newCrossDomainAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setL1GasLimit"
  ): TypedContractMethod<[newl1Gas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRemoteL1Token"
  ): TypedContractMethod<
    [l2Token: AddressLike, l1Token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenBridge"
  ): TypedContractMethod<
    [l2Token: AddressLike, tokenBridge: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawalRecipient"
  ): TypedContractMethod<
    [newWithdrawalRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "speedUpDeposit"
  ): TypedContractMethod<
    [
      depositor: BytesLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "speedUpV3Deposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenBridges"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "tryMulticall"
  ): TypedContractMethod<
    [data: BytesLike[]],
    [MultiCallerUpgradeable.ResultStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unsafeDeposit"
  ): TypedContractMethod<
    [
      depositor: BytesLike,
      recipient: BytesLike,
      inputToken: BytesLike,
      outputToken: BytesLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      depositNonce: BigNumberish,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawalRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedNativeToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedRelayerRefund"
  ): TypedContractEvent<
    ClaimedRelayerRefundEvent.InputTuple,
    ClaimedRelayerRefundEvent.OutputTuple,
    ClaimedRelayerRefundEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyDeletedRootBundle"
  ): TypedContractEvent<
    EmergencyDeletedRootBundleEvent.InputTuple,
    EmergencyDeletedRootBundleEvent.OutputTuple,
    EmergencyDeletedRootBundleEvent.OutputObject
  >;
  getEvent(
    key: "EnabledDepositRoute"
  ): TypedContractEvent<
    EnabledDepositRouteEvent.InputTuple,
    EnabledDepositRouteEvent.OutputTuple,
    EnabledDepositRouteEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedRelayerRefundRoot"
  ): TypedContractEvent<
    ExecutedRelayerRefundRootEvent.InputTuple,
    ExecutedRelayerRefundRootEvent.OutputTuple,
    ExecutedRelayerRefundRootEvent.OutputObject
  >;
  getEvent(
    key: "FilledRelay"
  ): TypedContractEvent<
    FilledRelayEvent.InputTuple,
    FilledRelayEvent.OutputTuple,
    FilledRelayEvent.OutputObject
  >;
  getEvent(
    key: "FilledV3Relay"
  ): TypedContractEvent<
    FilledV3RelayEvent.InputTuple,
    FilledV3RelayEvent.OutputTuple,
    FilledV3RelayEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PausedDeposits"
  ): TypedContractEvent<
    PausedDepositsEvent.InputTuple,
    PausedDepositsEvent.OutputTuple,
    PausedDepositsEvent.OutputObject
  >;
  getEvent(
    key: "PausedFills"
  ): TypedContractEvent<
    PausedFillsEvent.InputTuple,
    PausedFillsEvent.OutputTuple,
    PausedFillsEvent.OutputObject
  >;
  getEvent(
    key: "RelayedRootBundle"
  ): TypedContractEvent<
    RelayedRootBundleEvent.InputTuple,
    RelayedRootBundleEvent.OutputTuple,
    RelayedRootBundleEvent.OutputObject
  >;
  getEvent(
    key: "RequestedSlowFill"
  ): TypedContractEvent<
    RequestedSlowFillEvent.InputTuple,
    RequestedSlowFillEvent.OutputTuple,
    RequestedSlowFillEvent.OutputObject
  >;
  getEvent(
    key: "RequestedSpeedUpDeposit"
  ): TypedContractEvent<
    RequestedSpeedUpDepositEvent.InputTuple,
    RequestedSpeedUpDepositEvent.OutputTuple,
    RequestedSpeedUpDepositEvent.OutputObject
  >;
  getEvent(
    key: "RequestedSpeedUpV3Deposit"
  ): TypedContractEvent<
    RequestedSpeedUpV3DepositEvent.InputTuple,
    RequestedSpeedUpV3DepositEvent.OutputTuple,
    RequestedSpeedUpV3DepositEvent.OutputObject
  >;
  getEvent(
    key: "RequestedV3SlowFill"
  ): TypedContractEvent<
    RequestedV3SlowFillEvent.InputTuple,
    RequestedV3SlowFillEvent.OutputTuple,
    RequestedV3SlowFillEvent.OutputObject
  >;
  getEvent(
    key: "SetL1Gas"
  ): TypedContractEvent<
    SetL1GasEvent.InputTuple,
    SetL1GasEvent.OutputTuple,
    SetL1GasEvent.OutputObject
  >;
  getEvent(
    key: "SetL2TokenBridge"
  ): TypedContractEvent<
    SetL2TokenBridgeEvent.InputTuple,
    SetL2TokenBridgeEvent.OutputTuple,
    SetL2TokenBridgeEvent.OutputObject
  >;
  getEvent(
    key: "SetRemoteL1Token"
  ): TypedContractEvent<
    SetRemoteL1TokenEvent.InputTuple,
    SetRemoteL1TokenEvent.OutputTuple,
    SetRemoteL1TokenEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawalRecipient"
  ): TypedContractEvent<
    SetWithdrawalRecipientEvent.InputTuple,
    SetWithdrawalRecipientEvent.OutputTuple,
    SetWithdrawalRecipientEvent.OutputObject
  >;
  getEvent(
    key: "SetXDomainAdmin"
  ): TypedContractEvent<
    SetXDomainAdminEvent.InputTuple,
    SetXDomainAdminEvent.OutputTuple,
    SetXDomainAdminEvent.OutputObject
  >;
  getEvent(
    key: "TokensBridged"
  ): TypedContractEvent<
    TokensBridgedEvent.InputTuple,
    TokensBridgedEvent.OutputTuple,
    TokensBridgedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "V3FundsDeposited"
  ): TypedContractEvent<
    V3FundsDepositedEvent.InputTuple,
    V3FundsDepositedEvent.OutputTuple,
    V3FundsDepositedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ClaimedRelayerRefund(bytes32,bytes32,uint256,address)": TypedContractEvent<
      ClaimedRelayerRefundEvent.InputTuple,
      ClaimedRelayerRefundEvent.OutputTuple,
      ClaimedRelayerRefundEvent.OutputObject
    >;
    ClaimedRelayerRefund: TypedContractEvent<
      ClaimedRelayerRefundEvent.InputTuple,
      ClaimedRelayerRefundEvent.OutputTuple,
      ClaimedRelayerRefundEvent.OutputObject
    >;

    "EmergencyDeletedRootBundle(uint256)": TypedContractEvent<
      EmergencyDeletedRootBundleEvent.InputTuple,
      EmergencyDeletedRootBundleEvent.OutputTuple,
      EmergencyDeletedRootBundleEvent.OutputObject
    >;
    EmergencyDeletedRootBundle: TypedContractEvent<
      EmergencyDeletedRootBundleEvent.InputTuple,
      EmergencyDeletedRootBundleEvent.OutputTuple,
      EmergencyDeletedRootBundleEvent.OutputObject
    >;

    "EnabledDepositRoute(address,uint256,bool)": TypedContractEvent<
      EnabledDepositRouteEvent.InputTuple,
      EnabledDepositRouteEvent.OutputTuple,
      EnabledDepositRouteEvent.OutputObject
    >;
    EnabledDepositRoute: TypedContractEvent<
      EnabledDepositRouteEvent.InputTuple,
      EnabledDepositRouteEvent.OutputTuple,
      EnabledDepositRouteEvent.OutputObject
    >;

    "ExecutedRelayerRefundRoot(uint256,uint256,uint256[],uint32,uint32,address,address[],bool,address)": TypedContractEvent<
      ExecutedRelayerRefundRootEvent.InputTuple,
      ExecutedRelayerRefundRootEvent.OutputTuple,
      ExecutedRelayerRefundRootEvent.OutputObject
    >;
    ExecutedRelayerRefundRoot: TypedContractEvent<
      ExecutedRelayerRefundRootEvent.InputTuple,
      ExecutedRelayerRefundRootEvent.OutputTuple,
      ExecutedRelayerRefundRootEvent.OutputObject
    >;

    "FilledRelay(bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint32,uint32,bytes32,bytes32,bytes32,bytes32,bytes32,tuple)": TypedContractEvent<
      FilledRelayEvent.InputTuple,
      FilledRelayEvent.OutputTuple,
      FilledRelayEvent.OutputObject
    >;
    FilledRelay: TypedContractEvent<
      FilledRelayEvent.InputTuple,
      FilledRelayEvent.OutputTuple,
      FilledRelayEvent.OutputObject
    >;

    "FilledV3Relay(address,address,uint256,uint256,uint256,uint256,uint32,uint32,uint32,address,address,address,address,bytes,tuple)": TypedContractEvent<
      FilledV3RelayEvent.InputTuple,
      FilledV3RelayEvent.OutputTuple,
      FilledV3RelayEvent.OutputObject
    >;
    FilledV3Relay: TypedContractEvent<
      FilledV3RelayEvent.InputTuple,
      FilledV3RelayEvent.OutputTuple,
      FilledV3RelayEvent.OutputObject
    >;

    "FundsDeposited(bytes32,bytes32,uint256,uint256,uint256,uint256,uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PausedDeposits(bool)": TypedContractEvent<
      PausedDepositsEvent.InputTuple,
      PausedDepositsEvent.OutputTuple,
      PausedDepositsEvent.OutputObject
    >;
    PausedDeposits: TypedContractEvent<
      PausedDepositsEvent.InputTuple,
      PausedDepositsEvent.OutputTuple,
      PausedDepositsEvent.OutputObject
    >;

    "PausedFills(bool)": TypedContractEvent<
      PausedFillsEvent.InputTuple,
      PausedFillsEvent.OutputTuple,
      PausedFillsEvent.OutputObject
    >;
    PausedFills: TypedContractEvent<
      PausedFillsEvent.InputTuple,
      PausedFillsEvent.OutputTuple,
      PausedFillsEvent.OutputObject
    >;

    "RelayedRootBundle(uint32,bytes32,bytes32)": TypedContractEvent<
      RelayedRootBundleEvent.InputTuple,
      RelayedRootBundleEvent.OutputTuple,
      RelayedRootBundleEvent.OutputObject
    >;
    RelayedRootBundle: TypedContractEvent<
      RelayedRootBundleEvent.InputTuple,
      RelayedRootBundleEvent.OutputTuple,
      RelayedRootBundleEvent.OutputObject
    >;

    "RequestedSlowFill(bytes32,bytes32,uint256,uint256,uint256,uint256,uint32,uint32,bytes32,bytes32,bytes32,bytes32)": TypedContractEvent<
      RequestedSlowFillEvent.InputTuple,
      RequestedSlowFillEvent.OutputTuple,
      RequestedSlowFillEvent.OutputObject
    >;
    RequestedSlowFill: TypedContractEvent<
      RequestedSlowFillEvent.InputTuple,
      RequestedSlowFillEvent.OutputTuple,
      RequestedSlowFillEvent.OutputObject
    >;

    "RequestedSpeedUpDeposit(uint256,uint256,bytes32,bytes32,bytes,bytes)": TypedContractEvent<
      RequestedSpeedUpDepositEvent.InputTuple,
      RequestedSpeedUpDepositEvent.OutputTuple,
      RequestedSpeedUpDepositEvent.OutputObject
    >;
    RequestedSpeedUpDeposit: TypedContractEvent<
      RequestedSpeedUpDepositEvent.InputTuple,
      RequestedSpeedUpDepositEvent.OutputTuple,
      RequestedSpeedUpDepositEvent.OutputObject
    >;

    "RequestedSpeedUpV3Deposit(uint256,uint32,address,address,bytes,bytes)": TypedContractEvent<
      RequestedSpeedUpV3DepositEvent.InputTuple,
      RequestedSpeedUpV3DepositEvent.OutputTuple,
      RequestedSpeedUpV3DepositEvent.OutputObject
    >;
    RequestedSpeedUpV3Deposit: TypedContractEvent<
      RequestedSpeedUpV3DepositEvent.InputTuple,
      RequestedSpeedUpV3DepositEvent.OutputTuple,
      RequestedSpeedUpV3DepositEvent.OutputObject
    >;

    "RequestedV3SlowFill(address,address,uint256,uint256,uint256,uint32,uint32,uint32,address,address,address,bytes)": TypedContractEvent<
      RequestedV3SlowFillEvent.InputTuple,
      RequestedV3SlowFillEvent.OutputTuple,
      RequestedV3SlowFillEvent.OutputObject
    >;
    RequestedV3SlowFill: TypedContractEvent<
      RequestedV3SlowFillEvent.InputTuple,
      RequestedV3SlowFillEvent.OutputTuple,
      RequestedV3SlowFillEvent.OutputObject
    >;

    "SetL1Gas(uint32)": TypedContractEvent<
      SetL1GasEvent.InputTuple,
      SetL1GasEvent.OutputTuple,
      SetL1GasEvent.OutputObject
    >;
    SetL1Gas: TypedContractEvent<
      SetL1GasEvent.InputTuple,
      SetL1GasEvent.OutputTuple,
      SetL1GasEvent.OutputObject
    >;

    "SetL2TokenBridge(address,address)": TypedContractEvent<
      SetL2TokenBridgeEvent.InputTuple,
      SetL2TokenBridgeEvent.OutputTuple,
      SetL2TokenBridgeEvent.OutputObject
    >;
    SetL2TokenBridge: TypedContractEvent<
      SetL2TokenBridgeEvent.InputTuple,
      SetL2TokenBridgeEvent.OutputTuple,
      SetL2TokenBridgeEvent.OutputObject
    >;

    "SetRemoteL1Token(address,address)": TypedContractEvent<
      SetRemoteL1TokenEvent.InputTuple,
      SetRemoteL1TokenEvent.OutputTuple,
      SetRemoteL1TokenEvent.OutputObject
    >;
    SetRemoteL1Token: TypedContractEvent<
      SetRemoteL1TokenEvent.InputTuple,
      SetRemoteL1TokenEvent.OutputTuple,
      SetRemoteL1TokenEvent.OutputObject
    >;

    "SetWithdrawalRecipient(address)": TypedContractEvent<
      SetWithdrawalRecipientEvent.InputTuple,
      SetWithdrawalRecipientEvent.OutputTuple,
      SetWithdrawalRecipientEvent.OutputObject
    >;
    SetWithdrawalRecipient: TypedContractEvent<
      SetWithdrawalRecipientEvent.InputTuple,
      SetWithdrawalRecipientEvent.OutputTuple,
      SetWithdrawalRecipientEvent.OutputObject
    >;

    "SetXDomainAdmin(address)": TypedContractEvent<
      SetXDomainAdminEvent.InputTuple,
      SetXDomainAdminEvent.OutputTuple,
      SetXDomainAdminEvent.OutputObject
    >;
    SetXDomainAdmin: TypedContractEvent<
      SetXDomainAdminEvent.InputTuple,
      SetXDomainAdminEvent.OutputTuple,
      SetXDomainAdminEvent.OutputObject
    >;

    "TokensBridged(uint256,uint256,uint32,bytes32,address)": TypedContractEvent<
      TokensBridgedEvent.InputTuple,
      TokensBridgedEvent.OutputTuple,
      TokensBridgedEvent.OutputObject
    >;
    TokensBridged: TypedContractEvent<
      TokensBridgedEvent.InputTuple,
      TokensBridgedEvent.OutputTuple,
      TokensBridgedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "V3FundsDeposited(address,address,uint256,uint256,uint256,uint32,uint32,uint32,uint32,address,address,address,bytes)": TypedContractEvent<
      V3FundsDepositedEvent.InputTuple,
      V3FundsDepositedEvent.OutputTuple,
      V3FundsDepositedEvent.OutputObject
    >;
    V3FundsDeposited: TypedContractEvent<
      V3FundsDepositedEvent.InputTuple,
      V3FundsDepositedEvent.OutputTuple,
      V3FundsDepositedEvent.OutputObject
    >;
  };
}
