/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DataTypes {
  export type StrategyDataStruct = {
    activation: BigNumberish;
    lastReport: BigNumberish;
    currentDebt: BigNumberish;
    maxDebt: BigNumberish;
  };

  export type StrategyDataStructOutput = [
    activation: bigint,
    lastReport: bigint,
    currentDebt: bigint,
    maxDebt: bigint
  ] & {
    activation: bigint;
    lastReport: bigint;
    currentDebt: bigint;
    maxDebt: bigint;
  };
}

export interface VaultV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "DEFAULT_ADMIN_ROLE"
      | "addStrategy"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "burn"
      | "buyDebt"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "deposit"
      | "forceRevokeStrategy"
      | "getDefaultQueue"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw(address,uint256,address[])"
      | "maxWithdraw(address)"
      | "minimumTotalIdle"
      | "mint(address,uint256)"
      | "mint(uint256,address)"
      | "name"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "pricePerShare"
      | "pricePerShareWithFee"
      | "processReport"
      | "redeem"
      | "renounceRole"
      | "revokeRole"
      | "revokeStrategy"
      | "setAccountant"
      | "setAutoAllocate"
      | "setDefaultQueue"
      | "setDepositLimit"
      | "setDepositLimitForce"
      | "setDepositLimitModule"
      | "setDepositLimitModuleForce"
      | "setFeeRecipient"
      | "setManagementFee"
      | "setMinimumTotalIdle"
      | "setProfitMaxUnlockTime"
      | "setUseDefaultQueue"
      | "setWithdrawLimitModule"
      | "spendAllowance"
      | "strategies"
      | "symbol"
      | "totalAssets"
      | "totalDebt"
      | "totalIdle"
      | "totalSupply"
      | "totalSupplyWithFee"
      | "transfer"
      | "transferFrom"
      | "updateDebt"
      | "updateMaxDebtForStrategy"
      | "vaultData"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProxyImplementationUpdated"
      | "Approval"
      | "DebtPurchased"
      | "DebtUpdated"
      | "Deposit"
      | "Deposited"
      | "FeeUpdated"
      | "GovernmentChanged"
      | "Initialized"
      | "ManagementFeeMinted"
      | "RateUpdated"
      | "RequestedWithdraw"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StrategyChanged"
      | "StrategyReported"
      | "Transfer"
      | "TreasuryTransferred"
      | "UpdateAccountant"
      | "UpdateAutoAllocate"
      | "UpdateDefaultQueue"
      | "UpdateDepositLimit"
      | "UpdateDepositLimitModule"
      | "UpdateFeeRecipient"
      | "UpdateManagementFee"
      | "UpdateMinimumTotalIdle"
      | "UpdateProfitMaxUnlockTime"
      | "UpdateUseDefaultQueue"
      | "UpdateWithdrawLimitModule"
      | "Withdraw"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDebt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRevokeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw(address,uint256,address[])",
    values: [AddressLike, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTotalIdle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShareWithFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processReport",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoAllocate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultQueue",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimitForce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimitModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimitModuleForce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTotalIdle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitMaxUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseDefaultQueue",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawLimitModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spendAllowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalIdle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyWithFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebt",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxDebtForStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaultData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceRevokeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw(address,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTotalIdle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShareWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoAllocate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimitForce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimitModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimitModuleForce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTotalIdle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitMaxUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseDefaultQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawLimitModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalIdle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxDebtForStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyImplementationUpdatedEvent {
  export type InputTuple = [
    previousImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    previousImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    previousImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtPurchasedEvent {
  export type InputTuple = [strategy: AddressLike, amount: BigNumberish];
  export type OutputTuple = [strategy: string, amount: bigint];
  export interface OutputObject {
    strategy: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtUpdatedEvent {
  export type InputTuple = [
    strategy: AddressLike,
    currentDebt: BigNumberish,
    newDebt: BigNumberish
  ];
  export type OutputTuple = [
    strategy: string,
    currentDebt: bigint,
    newDebt: bigint
  ];
  export interface OutputObject {
    strategy: string;
    currentDebt: bigint;
    newDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, shares: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [newGovernment: AddressLike];
  export type OutputTuple = [newGovernment: string];
  export interface OutputObject {
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagementFeeMintedEvent {
  export type InputTuple = [feeRecipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [feeRecipient: string, amount: bigint];
  export interface OutputObject {
    feeRecipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateUpdatedEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedWithdrawEvent {
  export type InputTuple = [user: AddressLike, shares: BigNumberish];
  export type OutputTuple = [user: string, shares: bigint];
  export interface OutputObject {
    user: string;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyChangedEvent {
  export type InputTuple = [strategy: AddressLike, changeType: BigNumberish];
  export type OutputTuple = [strategy: string, changeType: bigint];
  export interface OutputObject {
    strategy: string;
    changeType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyReportedEvent {
  export type InputTuple = [
    strategy: AddressLike,
    gain: BigNumberish,
    loss: BigNumberish,
    currentDebt: BigNumberish,
    performanceFee: BigNumberish,
    refund: BigNumberish
  ];
  export type OutputTuple = [
    strategy: string,
    gain: bigint,
    loss: bigint,
    currentDebt: bigint,
    performanceFee: bigint,
    refund: bigint
  ];
  export interface OutputObject {
    strategy: string;
    gain: bigint;
    loss: bigint;
    currentDebt: bigint;
    performanceFee: bigint;
    refund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryTransferredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAccountantEvent {
  export type InputTuple = [accountant: AddressLike];
  export type OutputTuple = [accountant: string];
  export interface OutputObject {
    accountant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAutoAllocateEvent {
  export type InputTuple = [autoAllocate: boolean];
  export type OutputTuple = [autoAllocate: boolean];
  export interface OutputObject {
    autoAllocate: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDefaultQueueEvent {
  export type InputTuple = [newDefaultQueue: AddressLike[]];
  export type OutputTuple = [newDefaultQueue: string[]];
  export interface OutputObject {
    newDefaultQueue: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDepositLimitEvent {
  export type InputTuple = [depositLimit: BigNumberish];
  export type OutputTuple = [depositLimit: bigint];
  export interface OutputObject {
    depositLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDepositLimitModuleEvent {
  export type InputTuple = [depositLimitModule: AddressLike];
  export type OutputTuple = [depositLimitModule: string];
  export interface OutputObject {
    depositLimitModule: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeeRecipientEvent {
  export type InputTuple = [feeRecipient: AddressLike];
  export type OutputTuple = [feeRecipient: string];
  export interface OutputObject {
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateManagementFeeEvent {
  export type InputTuple = [managementFee: BigNumberish];
  export type OutputTuple = [managementFee: bigint];
  export interface OutputObject {
    managementFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinimumTotalIdleEvent {
  export type InputTuple = [minimumTotalIdle: BigNumberish];
  export type OutputTuple = [minimumTotalIdle: bigint];
  export interface OutputObject {
    minimumTotalIdle: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateProfitMaxUnlockTimeEvent {
  export type InputTuple = [profitMaxUnlockTime: BigNumberish];
  export type OutputTuple = [profitMaxUnlockTime: bigint];
  export interface OutputObject {
    profitMaxUnlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateUseDefaultQueueEvent {
  export type InputTuple = [useDefaultQueue: boolean];
  export type OutputTuple = [useDefaultQueue: boolean];
  export interface OutputObject {
    useDefaultQueue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWithdrawLimitModuleEvent {
  export type InputTuple = [withdrawLimitModule: AddressLike];
  export type OutputTuple = [withdrawLimitModule: string];
  export interface OutputObject {
    withdrawLimitModule: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    shares: BigNumberish,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    shares: bigint,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    user: string;
    shares: bigint;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultV2 extends BaseContract {
  connect(runner?: ContractRunner | null): VaultV2;
  waitForDeployment(): Promise<this>;

  interface: VaultV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addStrategy: TypedContractMethod<
    [strategy: AddressLike, addToQueue: boolean],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [owner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyDebt: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  forceRevokeStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  getDefaultQueue: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _asset: AddressLike,
      _name: string,
      _symbol: string,
      _profitMaxUnlockTime: BigNumberish,
      governance: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  maxDeposit: TypedContractMethod<[receiver: AddressLike], [bigint], "view">;

  maxMint: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  "maxWithdraw(address,uint256,address[])": TypedContractMethod<
    [owner: AddressLike, maxLoss: BigNumberish, _strategies: AddressLike[]],
    [bigint],
    "view"
  >;

  "maxWithdraw(address)": TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  minimumTotalIdle: TypedContractMethod<[], [bigint], "view">;

  "mint(address,uint256)": TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "mint(uint256,address)": TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  pricePerShare: TypedContractMethod<[], [bigint], "view">;

  pricePerShareWithFee: TypedContractMethod<[], [bigint], "view">;

  processReport: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setAccountant: TypedContractMethod<
    [newAccountant: AddressLike],
    [void],
    "nonpayable"
  >;

  setAutoAllocate: TypedContractMethod<
    [autoAllocate: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultQueue: TypedContractMethod<
    [newDefaultQueue: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setDepositLimit: TypedContractMethod<
    [depositLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDepositLimitForce: TypedContractMethod<
    [depositLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDepositLimitModule: TypedContractMethod<
    [newDepositLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositLimitModuleForce: TypedContractMethod<
    [newDepositLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setManagementFee: TypedContractMethod<
    [newManagementFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumTotalIdle: TypedContractMethod<
    [newMinimumTotalIdle: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProfitMaxUnlockTime: TypedContractMethod<
    [newProfitMaxUnlockTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUseDefaultQueue: TypedContractMethod<
    [useDefaultQueue: boolean],
    [void],
    "nonpayable"
  >;

  setWithdrawLimitModule: TypedContractMethod<
    [newWithdrawLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;

  spendAllowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategies: TypedContractMethod<
    [strategy: AddressLike],
    [DataTypes.StrategyDataStructOutput],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalDebt: TypedContractMethod<[], [bigint], "view">;

  totalIdle: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyWithFee: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateDebt: TypedContractMethod<
    [strategy: AddressLike, targetDebt: BigNumberish, maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxDebtForStrategy: TypedContractMethod<
    [strategy: AddressLike, newMaxDebt: BigNumberish],
    [void],
    "nonpayable"
  >;

  vaultData: TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        addressVault: string;
        totalDebt: bigint;
        totalIdle: bigint;
        useDefaultQueue: boolean;
        autoAllocate: boolean;
        minimumTotalIdle: bigint;
        depositLimit: bigint;
        profitMaxUnlockTime: bigint;
        fullProfitUnlockDate: bigint;
        profitUnlockingRate: bigint;
        lastProfitUpdate: bigint;
        accountant: string;
        depositLimitModule: string;
        withdrawLimitModule: string;
        feeRecipient: string;
        managementFee: bigint;
        lastTimeTakeManagementFee: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, addToQueue: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [owner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyDebt"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceRevokeStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDefaultQueue"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _name: string,
      _symbol: string,
      _profitMaxUnlockTime: BigNumberish,
      governance: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw(address,uint256,address[])"
  ): TypedContractMethod<
    [owner: AddressLike, maxLoss: BigNumberish, _strategies: AddressLike[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxWithdraw(address)"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTotalIdle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(uint256,address)"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pricePerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pricePerShareWithFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "processReport"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAccountant"
  ): TypedContractMethod<[newAccountant: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAutoAllocate"
  ): TypedContractMethod<[autoAllocate: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultQueue"
  ): TypedContractMethod<
    [newDefaultQueue: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositLimit"
  ): TypedContractMethod<[depositLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositLimitForce"
  ): TypedContractMethod<[depositLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositLimitModule"
  ): TypedContractMethod<
    [newDepositLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositLimitModuleForce"
  ): TypedContractMethod<
    [newDepositLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManagementFee"
  ): TypedContractMethod<
    [newManagementFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumTotalIdle"
  ): TypedContractMethod<
    [newMinimumTotalIdle: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfitMaxUnlockTime"
  ): TypedContractMethod<
    [newProfitMaxUnlockTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUseDefaultQueue"
  ): TypedContractMethod<[useDefaultQueue: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawLimitModule"
  ): TypedContractMethod<
    [newWithdrawLimitModule: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendAllowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [strategy: AddressLike],
    [DataTypes.StrategyDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalIdle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyWithFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDebt"
  ): TypedContractMethod<
    [strategy: AddressLike, targetDebt: BigNumberish, maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaxDebtForStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, newMaxDebt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        addressVault: string;
        totalDebt: bigint;
        totalIdle: bigint;
        useDefaultQueue: boolean;
        autoAllocate: boolean;
        minimumTotalIdle: bigint;
        depositLimit: bigint;
        profitMaxUnlockTime: bigint;
        fullProfitUnlockDate: bigint;
        profitUnlockingRate: bigint;
        lastProfitUpdate: bigint;
        accountant: string;
        depositLimitModule: string;
        withdrawLimitModule: string;
        feeRecipient: string;
        managementFee: bigint;
        lastTimeTakeManagementFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProxyImplementationUpdated"
  ): TypedContractEvent<
    ProxyImplementationUpdatedEvent.InputTuple,
    ProxyImplementationUpdatedEvent.OutputTuple,
    ProxyImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DebtPurchased"
  ): TypedContractEvent<
    DebtPurchasedEvent.InputTuple,
    DebtPurchasedEvent.OutputTuple,
    DebtPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "DebtUpdated"
  ): TypedContractEvent<
    DebtUpdatedEvent.InputTuple,
    DebtUpdatedEvent.OutputTuple,
    DebtUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ManagementFeeMinted"
  ): TypedContractEvent<
    ManagementFeeMintedEvent.InputTuple,
    ManagementFeeMintedEvent.OutputTuple,
    ManagementFeeMintedEvent.OutputObject
  >;
  getEvent(
    key: "RateUpdated"
  ): TypedContractEvent<
    RateUpdatedEvent.InputTuple,
    RateUpdatedEvent.OutputTuple,
    RateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestedWithdraw"
  ): TypedContractEvent<
    RequestedWithdrawEvent.InputTuple,
    RequestedWithdrawEvent.OutputTuple,
    RequestedWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyChanged"
  ): TypedContractEvent<
    StrategyChangedEvent.InputTuple,
    StrategyChangedEvent.OutputTuple,
    StrategyChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyReported"
  ): TypedContractEvent<
    StrategyReportedEvent.InputTuple,
    StrategyReportedEvent.OutputTuple,
    StrategyReportedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryTransferred"
  ): TypedContractEvent<
    TreasuryTransferredEvent.InputTuple,
    TreasuryTransferredEvent.OutputTuple,
    TreasuryTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAccountant"
  ): TypedContractEvent<
    UpdateAccountantEvent.InputTuple,
    UpdateAccountantEvent.OutputTuple,
    UpdateAccountantEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAutoAllocate"
  ): TypedContractEvent<
    UpdateAutoAllocateEvent.InputTuple,
    UpdateAutoAllocateEvent.OutputTuple,
    UpdateAutoAllocateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDefaultQueue"
  ): TypedContractEvent<
    UpdateDefaultQueueEvent.InputTuple,
    UpdateDefaultQueueEvent.OutputTuple,
    UpdateDefaultQueueEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDepositLimit"
  ): TypedContractEvent<
    UpdateDepositLimitEvent.InputTuple,
    UpdateDepositLimitEvent.OutputTuple,
    UpdateDepositLimitEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDepositLimitModule"
  ): TypedContractEvent<
    UpdateDepositLimitModuleEvent.InputTuple,
    UpdateDepositLimitModuleEvent.OutputTuple,
    UpdateDepositLimitModuleEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFeeRecipient"
  ): TypedContractEvent<
    UpdateFeeRecipientEvent.InputTuple,
    UpdateFeeRecipientEvent.OutputTuple,
    UpdateFeeRecipientEvent.OutputObject
  >;
  getEvent(
    key: "UpdateManagementFee"
  ): TypedContractEvent<
    UpdateManagementFeeEvent.InputTuple,
    UpdateManagementFeeEvent.OutputTuple,
    UpdateManagementFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinimumTotalIdle"
  ): TypedContractEvent<
    UpdateMinimumTotalIdleEvent.InputTuple,
    UpdateMinimumTotalIdleEvent.OutputTuple,
    UpdateMinimumTotalIdleEvent.OutputObject
  >;
  getEvent(
    key: "UpdateProfitMaxUnlockTime"
  ): TypedContractEvent<
    UpdateProfitMaxUnlockTimeEvent.InputTuple,
    UpdateProfitMaxUnlockTimeEvent.OutputTuple,
    UpdateProfitMaxUnlockTimeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateUseDefaultQueue"
  ): TypedContractEvent<
    UpdateUseDefaultQueueEvent.InputTuple,
    UpdateUseDefaultQueueEvent.OutputTuple,
    UpdateUseDefaultQueueEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWithdrawLimitModule"
  ): TypedContractEvent<
    UpdateWithdrawLimitModuleEvent.InputTuple,
    UpdateWithdrawLimitModuleEvent.OutputTuple,
    UpdateWithdrawLimitModuleEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProxyImplementationUpdated(address,address)": TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;
    ProxyImplementationUpdated: TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DebtPurchased(address,uint256)": TypedContractEvent<
      DebtPurchasedEvent.InputTuple,
      DebtPurchasedEvent.OutputTuple,
      DebtPurchasedEvent.OutputObject
    >;
    DebtPurchased: TypedContractEvent<
      DebtPurchasedEvent.InputTuple,
      DebtPurchasedEvent.OutputTuple,
      DebtPurchasedEvent.OutputObject
    >;

    "DebtUpdated(address,uint256,uint256)": TypedContractEvent<
      DebtUpdatedEvent.InputTuple,
      DebtUpdatedEvent.OutputTuple,
      DebtUpdatedEvent.OutputObject
    >;
    DebtUpdated: TypedContractEvent<
      DebtUpdatedEvent.InputTuple,
      DebtUpdatedEvent.OutputTuple,
      DebtUpdatedEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "GovernmentChanged(address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ManagementFeeMinted(address,uint256)": TypedContractEvent<
      ManagementFeeMintedEvent.InputTuple,
      ManagementFeeMintedEvent.OutputTuple,
      ManagementFeeMintedEvent.OutputObject
    >;
    ManagementFeeMinted: TypedContractEvent<
      ManagementFeeMintedEvent.InputTuple,
      ManagementFeeMintedEvent.OutputTuple,
      ManagementFeeMintedEvent.OutputObject
    >;

    "RateUpdated(uint256,uint256)": TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
    RateUpdated: TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;

    "RequestedWithdraw(address,uint256)": TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;
    RequestedWithdraw: TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StrategyChanged(address,uint8)": TypedContractEvent<
      StrategyChangedEvent.InputTuple,
      StrategyChangedEvent.OutputTuple,
      StrategyChangedEvent.OutputObject
    >;
    StrategyChanged: TypedContractEvent<
      StrategyChangedEvent.InputTuple,
      StrategyChangedEvent.OutputTuple,
      StrategyChangedEvent.OutputObject
    >;

    "StrategyReported(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;
    StrategyReported: TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TreasuryTransferred()": TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;
    TreasuryTransferred: TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;

    "UpdateAccountant(address)": TypedContractEvent<
      UpdateAccountantEvent.InputTuple,
      UpdateAccountantEvent.OutputTuple,
      UpdateAccountantEvent.OutputObject
    >;
    UpdateAccountant: TypedContractEvent<
      UpdateAccountantEvent.InputTuple,
      UpdateAccountantEvent.OutputTuple,
      UpdateAccountantEvent.OutputObject
    >;

    "UpdateAutoAllocate(bool)": TypedContractEvent<
      UpdateAutoAllocateEvent.InputTuple,
      UpdateAutoAllocateEvent.OutputTuple,
      UpdateAutoAllocateEvent.OutputObject
    >;
    UpdateAutoAllocate: TypedContractEvent<
      UpdateAutoAllocateEvent.InputTuple,
      UpdateAutoAllocateEvent.OutputTuple,
      UpdateAutoAllocateEvent.OutputObject
    >;

    "UpdateDefaultQueue(address[])": TypedContractEvent<
      UpdateDefaultQueueEvent.InputTuple,
      UpdateDefaultQueueEvent.OutputTuple,
      UpdateDefaultQueueEvent.OutputObject
    >;
    UpdateDefaultQueue: TypedContractEvent<
      UpdateDefaultQueueEvent.InputTuple,
      UpdateDefaultQueueEvent.OutputTuple,
      UpdateDefaultQueueEvent.OutputObject
    >;

    "UpdateDepositLimit(uint256)": TypedContractEvent<
      UpdateDepositLimitEvent.InputTuple,
      UpdateDepositLimitEvent.OutputTuple,
      UpdateDepositLimitEvent.OutputObject
    >;
    UpdateDepositLimit: TypedContractEvent<
      UpdateDepositLimitEvent.InputTuple,
      UpdateDepositLimitEvent.OutputTuple,
      UpdateDepositLimitEvent.OutputObject
    >;

    "UpdateDepositLimitModule(address)": TypedContractEvent<
      UpdateDepositLimitModuleEvent.InputTuple,
      UpdateDepositLimitModuleEvent.OutputTuple,
      UpdateDepositLimitModuleEvent.OutputObject
    >;
    UpdateDepositLimitModule: TypedContractEvent<
      UpdateDepositLimitModuleEvent.InputTuple,
      UpdateDepositLimitModuleEvent.OutputTuple,
      UpdateDepositLimitModuleEvent.OutputObject
    >;

    "UpdateFeeRecipient(address)": TypedContractEvent<
      UpdateFeeRecipientEvent.InputTuple,
      UpdateFeeRecipientEvent.OutputTuple,
      UpdateFeeRecipientEvent.OutputObject
    >;
    UpdateFeeRecipient: TypedContractEvent<
      UpdateFeeRecipientEvent.InputTuple,
      UpdateFeeRecipientEvent.OutputTuple,
      UpdateFeeRecipientEvent.OutputObject
    >;

    "UpdateManagementFee(uint256)": TypedContractEvent<
      UpdateManagementFeeEvent.InputTuple,
      UpdateManagementFeeEvent.OutputTuple,
      UpdateManagementFeeEvent.OutputObject
    >;
    UpdateManagementFee: TypedContractEvent<
      UpdateManagementFeeEvent.InputTuple,
      UpdateManagementFeeEvent.OutputTuple,
      UpdateManagementFeeEvent.OutputObject
    >;

    "UpdateMinimumTotalIdle(uint256)": TypedContractEvent<
      UpdateMinimumTotalIdleEvent.InputTuple,
      UpdateMinimumTotalIdleEvent.OutputTuple,
      UpdateMinimumTotalIdleEvent.OutputObject
    >;
    UpdateMinimumTotalIdle: TypedContractEvent<
      UpdateMinimumTotalIdleEvent.InputTuple,
      UpdateMinimumTotalIdleEvent.OutputTuple,
      UpdateMinimumTotalIdleEvent.OutputObject
    >;

    "UpdateProfitMaxUnlockTime(uint256)": TypedContractEvent<
      UpdateProfitMaxUnlockTimeEvent.InputTuple,
      UpdateProfitMaxUnlockTimeEvent.OutputTuple,
      UpdateProfitMaxUnlockTimeEvent.OutputObject
    >;
    UpdateProfitMaxUnlockTime: TypedContractEvent<
      UpdateProfitMaxUnlockTimeEvent.InputTuple,
      UpdateProfitMaxUnlockTimeEvent.OutputTuple,
      UpdateProfitMaxUnlockTimeEvent.OutputObject
    >;

    "UpdateUseDefaultQueue(bool)": TypedContractEvent<
      UpdateUseDefaultQueueEvent.InputTuple,
      UpdateUseDefaultQueueEvent.OutputTuple,
      UpdateUseDefaultQueueEvent.OutputObject
    >;
    UpdateUseDefaultQueue: TypedContractEvent<
      UpdateUseDefaultQueueEvent.InputTuple,
      UpdateUseDefaultQueueEvent.OutputTuple,
      UpdateUseDefaultQueueEvent.OutputObject
    >;

    "UpdateWithdrawLimitModule(address)": TypedContractEvent<
      UpdateWithdrawLimitModuleEvent.InputTuple,
      UpdateWithdrawLimitModuleEvent.OutputTuple,
      UpdateWithdrawLimitModuleEvent.OutputObject
    >;
    UpdateWithdrawLimitModule: TypedContractEvent<
      UpdateWithdrawLimitModuleEvent.InputTuple,
      UpdateWithdrawLimitModuleEvent.OutputTuple,
      UpdateWithdrawLimitModuleEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
