/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AerodromeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPools"
      | "allPoolsLength"
      | "createPool"
      | "defaultUnstakedFee"
      | "enableTickSpacing"
      | "factoryRegistry"
      | "getPool"
      | "getSwapFee"
      | "getUnstakedFee"
      | "isPool"
      | "owner"
      | "poolImplementation"
      | "setDefaultUnstakedFee"
      | "setOwner"
      | "setSwapFeeManager"
      | "setSwapFeeModule"
      | "setUnstakedFeeManager"
      | "setUnstakedFeeModule"
      | "swapFeeManager"
      | "swapFeeModule"
      | "tickSpacingToFee"
      | "tickSpacings"
      | "unstakedFeeManager"
      | "unstakedFeeModule"
      | "voter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultUnstakedFeeChanged"
      | "OwnerChanged"
      | "PoolCreated"
      | "SwapFeeManagerChanged"
      | "SwapFeeModuleChanged"
      | "TickSpacingEnabled"
      | "UnstakedFeeManagerChanged"
      | "UnstakedFeeModuleChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultUnstakedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTickSpacing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakedFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultUnstakedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeeModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakedFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakedFeeModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacingToFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakedFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakedFeeModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultUnstakedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultUnstakedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakedFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakedFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacingToFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakedFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakedFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
}

export namespace DefaultUnstakedFeeChangedEvent {
  export type InputTuple = [
    oldUnstakedFee: BigNumberish,
    newUnstakedFee: BigNumberish
  ];
  export type OutputTuple = [oldUnstakedFee: bigint, newUnstakedFee: bigint];
  export interface OutputObject {
    oldUnstakedFee: bigint;
    newUnstakedFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    tickSpacing: BigNumberish,
    pool: AddressLike
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    tickSpacing: bigint,
    pool: string
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    tickSpacing: bigint;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapFeeManagerChangedEvent {
  export type InputTuple = [
    oldFeeManager: AddressLike,
    newFeeManager: AddressLike
  ];
  export type OutputTuple = [oldFeeManager: string, newFeeManager: string];
  export interface OutputObject {
    oldFeeManager: string;
    newFeeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapFeeModuleChangedEvent {
  export type InputTuple = [
    oldFeeModule: AddressLike,
    newFeeModule: AddressLike
  ];
  export type OutputTuple = [oldFeeModule: string, newFeeModule: string];
  export interface OutputObject {
    oldFeeModule: string;
    newFeeModule: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TickSpacingEnabledEvent {
  export type InputTuple = [tickSpacing: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [tickSpacing: bigint, fee: bigint];
  export interface OutputObject {
    tickSpacing: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedFeeManagerChangedEvent {
  export type InputTuple = [
    oldFeeManager: AddressLike,
    newFeeManager: AddressLike
  ];
  export type OutputTuple = [oldFeeManager: string, newFeeManager: string];
  export interface OutputObject {
    oldFeeManager: string;
    newFeeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedFeeModuleChangedEvent {
  export type InputTuple = [
    oldFeeModule: AddressLike,
    newFeeModule: AddressLike
  ];
  export type OutputTuple = [oldFeeModule: string, newFeeModule: string];
  export interface OutputObject {
    oldFeeModule: string;
    newFeeModule: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AerodromeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AerodromeFactory;
  waitForDeployment(): Promise<this>;

  interface: AerodromeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allPoolsLength: TypedContractMethod<[], [bigint], "view">;

  createPool: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      tickSpacing: BigNumberish,
      sqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  defaultUnstakedFee: TypedContractMethod<[], [bigint], "view">;

  enableTickSpacing: TypedContractMethod<
    [tickSpacing: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  factoryRegistry: TypedContractMethod<[], [string], "view">;

  getPool: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  getSwapFee: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  getUnstakedFee: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  isPool: TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolImplementation: TypedContractMethod<[], [string], "view">;

  setDefaultUnstakedFee: TypedContractMethod<
    [_defaultUnstakedFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setSwapFeeManager: TypedContractMethod<
    [_swapFeeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapFeeModule: TypedContractMethod<
    [_swapFeeModule: AddressLike],
    [void],
    "nonpayable"
  >;

  setUnstakedFeeManager: TypedContractMethod<
    [_unstakedFeeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setUnstakedFeeModule: TypedContractMethod<
    [_unstakedFeeModule: AddressLike],
    [void],
    "nonpayable"
  >;

  swapFeeManager: TypedContractMethod<[], [string], "view">;

  swapFeeModule: TypedContractMethod<[], [string], "view">;

  tickSpacingToFee: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  tickSpacings: TypedContractMethod<[], [bigint[]], "view">;

  unstakedFeeManager: TypedContractMethod<[], [string], "view">;

  unstakedFeeModule: TypedContractMethod<[], [string], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPoolsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      tickSpacing: BigNumberish,
      sqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultUnstakedFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enableTickSpacing"
  ): TypedContractMethod<
    [tickSpacing: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factoryRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapFee"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnstakedFee"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPool"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDefaultUnstakedFee"
  ): TypedContractMethod<
    [_defaultUnstakedFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapFeeManager"
  ): TypedContractMethod<[_swapFeeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapFeeModule"
  ): TypedContractMethod<[_swapFeeModule: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUnstakedFeeManager"
  ): TypedContractMethod<
    [_unstakedFeeManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnstakedFeeModule"
  ): TypedContractMethod<
    [_unstakedFeeModule: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapFeeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapFeeModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickSpacingToFee"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tickSpacings"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "unstakedFeeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unstakedFeeModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DefaultUnstakedFeeChanged"
  ): TypedContractEvent<
    DefaultUnstakedFeeChangedEvent.InputTuple,
    DefaultUnstakedFeeChangedEvent.OutputTuple,
    DefaultUnstakedFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapFeeManagerChanged"
  ): TypedContractEvent<
    SwapFeeManagerChangedEvent.InputTuple,
    SwapFeeManagerChangedEvent.OutputTuple,
    SwapFeeManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "SwapFeeModuleChanged"
  ): TypedContractEvent<
    SwapFeeModuleChangedEvent.InputTuple,
    SwapFeeModuleChangedEvent.OutputTuple,
    SwapFeeModuleChangedEvent.OutputObject
  >;
  getEvent(
    key: "TickSpacingEnabled"
  ): TypedContractEvent<
    TickSpacingEnabledEvent.InputTuple,
    TickSpacingEnabledEvent.OutputTuple,
    TickSpacingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "UnstakedFeeManagerChanged"
  ): TypedContractEvent<
    UnstakedFeeManagerChangedEvent.InputTuple,
    UnstakedFeeManagerChangedEvent.OutputTuple,
    UnstakedFeeManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnstakedFeeModuleChanged"
  ): TypedContractEvent<
    UnstakedFeeModuleChangedEvent.InputTuple,
    UnstakedFeeModuleChangedEvent.OutputTuple,
    UnstakedFeeModuleChangedEvent.OutputObject
  >;

  filters: {
    "DefaultUnstakedFeeChanged(uint24,uint24)": TypedContractEvent<
      DefaultUnstakedFeeChangedEvent.InputTuple,
      DefaultUnstakedFeeChangedEvent.OutputTuple,
      DefaultUnstakedFeeChangedEvent.OutputObject
    >;
    DefaultUnstakedFeeChanged: TypedContractEvent<
      DefaultUnstakedFeeChangedEvent.InputTuple,
      DefaultUnstakedFeeChangedEvent.OutputTuple,
      DefaultUnstakedFeeChangedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "PoolCreated(address,address,int24,address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "SwapFeeManagerChanged(address,address)": TypedContractEvent<
      SwapFeeManagerChangedEvent.InputTuple,
      SwapFeeManagerChangedEvent.OutputTuple,
      SwapFeeManagerChangedEvent.OutputObject
    >;
    SwapFeeManagerChanged: TypedContractEvent<
      SwapFeeManagerChangedEvent.InputTuple,
      SwapFeeManagerChangedEvent.OutputTuple,
      SwapFeeManagerChangedEvent.OutputObject
    >;

    "SwapFeeModuleChanged(address,address)": TypedContractEvent<
      SwapFeeModuleChangedEvent.InputTuple,
      SwapFeeModuleChangedEvent.OutputTuple,
      SwapFeeModuleChangedEvent.OutputObject
    >;
    SwapFeeModuleChanged: TypedContractEvent<
      SwapFeeModuleChangedEvent.InputTuple,
      SwapFeeModuleChangedEvent.OutputTuple,
      SwapFeeModuleChangedEvent.OutputObject
    >;

    "TickSpacingEnabled(int24,uint24)": TypedContractEvent<
      TickSpacingEnabledEvent.InputTuple,
      TickSpacingEnabledEvent.OutputTuple,
      TickSpacingEnabledEvent.OutputObject
    >;
    TickSpacingEnabled: TypedContractEvent<
      TickSpacingEnabledEvent.InputTuple,
      TickSpacingEnabledEvent.OutputTuple,
      TickSpacingEnabledEvent.OutputObject
    >;

    "UnstakedFeeManagerChanged(address,address)": TypedContractEvent<
      UnstakedFeeManagerChangedEvent.InputTuple,
      UnstakedFeeManagerChangedEvent.OutputTuple,
      UnstakedFeeManagerChangedEvent.OutputObject
    >;
    UnstakedFeeManagerChanged: TypedContractEvent<
      UnstakedFeeManagerChangedEvent.InputTuple,
      UnstakedFeeManagerChangedEvent.OutputTuple,
      UnstakedFeeManagerChangedEvent.OutputObject
    >;

    "UnstakedFeeModuleChanged(address,address)": TypedContractEvent<
      UnstakedFeeModuleChangedEvent.InputTuple,
      UnstakedFeeModuleChangedEvent.OutputTuple,
      UnstakedFeeModuleChangedEvent.OutputObject
    >;
    UnstakedFeeModuleChanged: TypedContractEvent<
      UnstakedFeeModuleChangedEvent.InputTuple,
      UnstakedFeeModuleChangedEvent.OutputTuple,
      UnstakedFeeModuleChangedEvent.OutputObject
    >;
  };
}
